package main

import (
	"fmt"
	"regexp"

	"github.com/alextanhongpin/pkg/gen"
	"github.com/dave/jennifer/jen"
	. "github.com/dave/jennifer/jen"
)

const Generator = "reader"

var (
	tagRe *regexp.Regexp
)

func init() {
	tagRe = regexp.MustCompile(`read:"-"`)
}

func main() {
	gen.New(generateStructFromFields)
}

func skipField(tag string) bool {
	return tagRe.MatchString(tag)
}

func generateStructFromFields(opt gen.Option) error {
	var (
		pkgName    = opt.PkgName
		pkgPath    = opt.PkgPath
		out        = opt.Out
		structName = opt.StructName
		fields     = opt.Fields
	)
	f := NewFile(pkgName) // e.g. main
	f.PackageComment(fmt.Sprintf("Code generated by %s, DO NOT EDIT.", Generator))

	for _, field := range fields {
		if field.Exported {
			continue
		}
		if skipField(field.Tag) {
			continue
		}
		generateGetter(f, pkgPath, structName, field)
	}

	return f.Save(out) // e.g. main_gen.go
}

func generateGetter(f *jen.File, pkgPath, structName string, field gen.StructField) {
	// Output:
	// func (e YourStruct) Name() string {
	// 	return e.name
	// }
	ptr := ""
	if field.IsPointer {
		ptr = "*"
	}

	shortName := gen.LowerFirst(structName)[:1]
	f.Func().Params(
		// (e YourStruct)
		Id(shortName).Id(structName),
	).Id(
		// Name
		gen.UpperCommonInitialism(field.Name),
	).
		Params().Op(ptr).
		Qual(gen.SkipCurrentPackagePath(pkgPath, field), field.FieldType).Block(
		Return(Id(shortName).Dot(field.Name)),
	).Line()
}
